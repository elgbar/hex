import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

import java.nio.file.Files
import java.nio.file.Paths

buildscript {
  ext {
    appName = "Hex"
    kotlinVersion = "2.0.20"
    gdxVersion = '1.12.1'
    ktxVersion = "1.12.1-rc2"
    visVersion = '1.5.3'
    jacksonVersion = "2.17.2"
    junitVersion = "5.11.1"
    kotlinCoroutineVersion = "1.9.0"
    argparserVersion = "2.0.7"
    spotlessVersion = "6.25.0"
    androidGradleToolsVersion = '8.6.0'
    ktlintVersion = "0.48.2"
    gradleVersions = "0.51.0"
  }

  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    gradlePluginPortal()
    google()
  }

  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    classpath "com.diffplug.spotless:spotless-plugin-gradle:$spotlessVersion"
    classpath "com.android.tools.build:gradle:$androidGradleToolsVersion"
    classpath "com.github.ben-manes:gradle-versions-plugin:$gradleVersions"
  }
}

def isNonStable = { String version ->
  def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
  def regex = /^[0-9,.v-]+(-r)?$/
  return !stableKeyword && !(version ==~ regex)
}

tasks.withType(KotlinCompile).configureEach {
  it.kotlinJavaToolchainProvider.languageVersion.set(JavaLanguageVersion.of(17))

  compilerOptions {
    progressiveMode = true
    freeCompilerArgs.add("-Xnon-local-break-continue") // https://github.com/Kotlin/KEEP/blob/guards/proposals/break-continue-in-inline-lambdas.md
  }
}

subprojects {
  apply plugin: "com.diffplug.spotless"

  version = hexVersion

  repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
    google()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
  }

  spotless {
    kotlin {
      targetExclude fileTree(projectDir) {
        include '**/noise/**'
        include '**/hexworks/**'
      }

      ktlint()
        .setEditorConfigPath("$rootDir/.editorconfig")
        .editorConfigOverride([
          "ktlint_function_signature_rule_force_multiline_when_parameter_count_greater_or_equal_than": "5",
          "ktlint_function_signature_body_expression_wrapping"                                       : "multiline"
        ])
    }
    format 'misc', {
      // define the files to apply `misc` to
      target '*.kt', '*.gradle', '*.md', '.gitignore'

      // define the steps to apply to those files
      trimTrailingWhitespace()
      indentWithSpaces(2)
      endWithNewline()
    }
  }
  assemble.dependsOn(spotlessApply)

}

allprojects {
  apply plugin: "com.github.ben-manes.versions"

  tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
      isNonStable(it.candidate.version)
    }
  }
}

tasks.named('wrapper') {
  distributionType = Wrapper.DistributionType.BIN
}

project(":android") {
  apply plugin: "com.android.application"
  apply plugin: 'kotlin-android'

  configurations { natives }

  dependencies {
    implementation project(":core")

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinCoroutineVersion"

    implementation "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"
    natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86"
    natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86_64"

    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86_64"

  }
}

project(":desktop") {

  apply plugin: "kotlin"

  dependencies {
    implementation project(":core")
    implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
  }

  test {
    useJUnitPlatform()
  }

  jar {
    duplicatesStrategy = DuplicatesStrategy.WARN
  }

  classes {
    doFirst {
      // Automatically create a soft link to the island folder to allow map-editor to work
      // On windows developer mode must be turned on for this to work
      // This file is only used when map editor is also used, you can play the game without this file existing
      var root = rootDir.path
      var targetPath = Paths.get(root, "core", "src", "main", "resources", "islands")
      var link = Paths.get(root, "islands")
      if (Files.notExists(link)) {
        try {
          Files.createSymbolicLink(link, targetPath)
        } catch (IOException e) {
          System.err.println("Failed to create symbolic link. Try enable developer mode: https://blogs.windows.com/windowsdeveloper/2016/12/02/symlinks-windows-10/.\n $e.class.simpleName: $e.message")
        }
      }
    }
  }
}

project(":core") {

  apply plugin: "kotlin"

  classes {
    doFirst {
      layout.buildDirectory.file("resources/main/version.properties").get().asFile.withWriter { writer ->
        Properties properties = new Properties()
        properties['version'] = hexVersion
        properties.store writer, null
      }
    }
  }

  dependencies {
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    api "com.xenomachina:kotlin-argparser:$argparserVersion"

    api "com.badlogicgames.gdx:gdx:$gdxVersion"
    api "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    api "com.kotcrab.vis:vis-ui:$visVersion"
    api platform("org.jetbrains.kotlinx:kotlinx-coroutines-bom:$kotlinCoroutineVersion")
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutineVersion"

    api "io.github.libktx:ktx-app:$ktxVersion"
    implementation "io.github.libktx:ktx-vis:$ktxVersion"
    implementation "io.github.libktx:ktx-vis-style:$ktxVersion"
    implementation "io.github.libktx:ktx-style:$ktxVersion"
    implementation "io.github.libktx:ktx-actors:$ktxVersion"
    implementation "io.github.libktx:ktx-collections:$ktxVersion"
    implementation "io.github.libktx:ktx-graphics:$ktxVersion"
    implementation "io.github.libktx:ktx-async:$ktxVersion"
    implementation "io.github.libktx:ktx-assets:$ktxVersion"

    api "com.badlogicgames.gdx:gdx-tools:$gdxVersion"

    api platform("com.fasterxml.jackson:jackson-bom:$jacksonVersion")
    api "com.fasterxml.jackson.module:jackson-module-kotlin"
    api "com.fasterxml.jackson.dataformat:jackson-dataformat-smile"

    implementation 'org.tukaani:xz:1.10'

    testApi "org.jetbrains.kotlin:kotlin-test-junit5:$kotlinVersion"
    testApi("org.junit.jupiter:junit-jupiter-api:$junitVersion")
    testApi "com.badlogicgames.gdx:gdx-backend-headless:$gdxVersion"
    testApi "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
  }
}
