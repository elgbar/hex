buildscript {

  ext {
    kotlinVersion = "1.4.21"
    appName = "Hex"
    gdxVersion = '1.9.12'
    roboVMVersion = '2.3.8'
    ashleyVersion = '1.7.3'
    aiVersion = '1.8.2'
    visVersion = '1.4.8'
    jacksonVersion = "2.12.0"
    junitVersion = "5.4.2"
    ktxVersion = "1.9.12-b1"
    kotlinCoroutineVersion = "1.4.2"
    argparserVersion = "2.0.7"
    mixiteVersion = "2020.1.0"
  }

  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    jcenter()
    google()
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    classpath "com.diffplug.spotless:spotless-plugin-gradle:5.6.1"
    classpath 'com.android.tools.build:gradle:4.1.1'
  }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8

  kotlinOptions {
    jvmTarget = '1.8'
  }
}

subprojects {
  apply plugin: "idea"
  apply plugin: "com.diffplug.spotless"

  version = '1.0'

  repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    google()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    maven { url 'https://jitpack.io' }
  }

  //[compileKotlin, compileTestKotlin]*.kotlinOptions*.jvmTarget = "1.8"
  // [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'


  spotless {
    kotlin {
      ktlint("0.39.0").userData([
         "indent_size"             : "2",
         "continuation_indent_size": "2",
         "max_line_length"         : "180"
      ])
    }
    groovyGradle {
      target '*.gradle' // default target of groovyGradle
      greclipse()
    }
    format 'misc', {
      // define the files to apply `misc` to
      target '*.kt', '*.gradle', '*.md', '.gitignore'

      // define the steps to apply to those files
      trimTrailingWhitespace()
      indentWithSpaces(2)
      endWithNewline()
    }
  }
  assemble.dependsOn(spotlessApply)
}

tasks.named('wrapper') {
  distributionType = Wrapper.DistributionType.ALL
}


project(":android") {
  apply plugin: "com.android.application"
  apply plugin: 'kotlin-android'

  configurations { natives }

  dependencies {
    implementation project(":core")
    api "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"
    natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86"
    natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86_64"

    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86_64"

  }
}

project(":desktop") {

  apply plugin: "kotlin"

  dependencies {
    api project(":core")
    api "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
    api "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    api "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
  }

  test {
    useJUnitPlatform()
  }
}

project(":core") {

  apply plugin: "kotlin"

  dependencies {
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    api "com.xenomachina:kotlin-argparser:$argparserVersion"

    api "com.badlogicgames.gdx:gdx:$gdxVersion"
    api "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    api "com.badlogicgames.gdx:gdx-ai:$aiVersion"
    api "com.kotcrab.vis:vis-ui:$visVersion"
    api "com.github.Hexworks.mixite:mixite.core-jvm:$mixiteVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutineVersion"

    api "io.github.libktx:ktx-app:$ktxVersion"
    implementation "io.github.libktx:ktx-vis:$ktxVersion"
    implementation "io.github.libktx:ktx-vis-style:$ktxVersion"
    implementation "io.github.libktx:ktx-style:$ktxVersion"
    implementation "io.github.libktx:ktx-actors:$ktxVersion"
    implementation "io.github.libktx:ktx-collections:$ktxVersion"
    implementation "io.github.libktx:ktx-graphics:$ktxVersion"
    implementation "io.github.libktx:ktx-async:$ktxVersion"
    implementation "io.github.libktx:ktx-assets:$ktxVersion"

    api "com.badlogicgames.gdx:gdx-tools:$gdxVersion"

    api "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"

    testApi "org.jetbrains.kotlin:kotlin-test-junit5:$kotlinVersion"
    testApi("org.junit.jupiter:junit-jupiter-api:$junitVersion")
    testApi "com.badlogicgames.gdx:gdx-backend-headless:$gdxVersion"
    testApi "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
  }
}
