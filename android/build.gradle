project.ext.mainClassName = "no.elg.hex.desktop.AndroidLauncher"
project.ext.assetsDir = new File("../core/src/main/resources")

int androidSdkVersion = 33
int androidVersionCode = Integer.parseInt(androidVersionCode)

android {
  buildToolsVersion = "33.0.2"
  compileSdk androidSdkVersion

  compileOptions {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
  }

  namespace 'no.elg.hex'

  sourceSets {
    main {
      manifest.srcFile 'AndroidManifest.xml'
      java.srcDirs = ['src']
      aidl.srcDirs = ['src']
      renderscript.srcDirs = ['src']
      res.srcDirs = ['res']
      assets.srcDirs = [
        'assets',
        '../core/src/main/resources'
      ]
      jniLibs.srcDirs = ['libs']
    }
  }
  var fullVersion = "$hexVersion-avc$androidVersionCode"
  packagingOptions {
    resources {
      excludes += ['META-INF/robovm/ios/robovm.xml']
      excludes += ['islands/**']
      excludes += ['sprites/**']
      excludes += ['fonts/**']
      excludes += ['sounds/**']
      excludes += ['icons/**']
      excludes += ['shaders/**']
    }
  }
  defaultConfig {
    applicationId "no.elg.hex"
    minSdkVersion 26
    targetSdkVersion androidSdkVersion
    versionCode androidVersionCode
    versionName fullVersion
  }
  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      resValue("string", "version", hexVersion)
      resValue("string", "args", "")
    }
    debug {
      minifyEnabled false

      resValue("string", "version", hexVersion)
      resValue("string", "args", "")
    }
  }
  buildFeatures {
    renderScript true
    aidl true
  }
}

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
tasks.register('copyAndroidNatives') {
  doFirst {
    file("libs/armeabi-v7a/").mkdirs()
    file("libs/arm64-v8a/").mkdirs()
    file("libs/x86_64/").mkdirs()
    file("libs/x86/").mkdirs()

    configurations.natives.copy().files.each { jar ->
      def outputDir = null
      if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
      if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
      if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
      if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
      if (outputDir != null) {
        copy {
          from zipTree(jar)
          into outputDir
          include "*.so"
        }
      }
    }
  }
}

tasks.configureEach { packageTask ->
  if (packageTask.name.contains("package")) {
    packageTask.dependsOn 'copyAndroidNatives'
  }
}

tasks.register('run', Exec) {
  def path
  def localProperties = project.file("../local.properties")
  if (localProperties.exists()) {
    Properties properties = new Properties()
    localProperties.withInputStream { instr ->
      properties.load(instr)
    }
    def sdkDir = properties.getProperty('sdk.dir')
    if (sdkDir) {
      path = sdkDir
    } else {
      path = "$System.env.ANDROID_HOME"
    }
  } else {
    path = "$System.env.ANDROID_HOME"
  }

  def adb = path + "/platform-tools/adb"
  commandLine "$adb", 'shell', 'am', 'start', '-n', 'no.elg.hex/no.elg.hex.AndroidLauncher'
}
